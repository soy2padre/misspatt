
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Tabula Rasa
> rm(list = ls())
> 
> # Start Timing
> start <- proc.time()
> 
> # Dependencies
> if (!require('doRNG'))
+   install.packages('doRNG', dependencies = TRUE)
Loading required package: doRNG
Loading required package: foreach
Loading required package: rngtools
> if (!require('doParallel'))
+   install.packages('doParallel', dependencies = TRUE)
Loading required package: doParallel
Loading required package: iterators
Loading required package: parallel
> if (!require('data.table'))
+   install.packages('data.table', dependencies = TRUE)
Loading required package: data.table
> if (!require('foreach'))
+   install.packages('foreach', dependencies = TRUE)
> 
> # Parallel Setup
> ncores <- detectCores() - 1
> cl <- makeCluster(ncores)
> registerDoParallel(cl)
> 
> # Load Functions
> source('simdata.R')
Loading required package: MASS
> source('mkmats.R')
Loading required package: psych
> source('dopcamat.R')
Loading required package: paran
> source('Kaiser_Jolliffe_Proflik.R')
> source('EKC.R')
> 
> # Simulation Parameters
> reps <- 1000
> c <- .3
> r <- .7
> 
> samp <- c(100, 250, 1000)
> nf <- c(3, 5, 10)
> nipc <- c(3, 5, 10)
> pctmiss <- c(.1, .25, .5)
> ls <- length(samp)
> lf <- length(nf)
> li <- length(nipc)
> lm <- length(pctmiss)
> totlen <- reps * ls * lf * li * lm
> 
> # Specify that these carry across loops
> pkgs <- c('paran', 'psych', 'MASS', 'parallel')
> 
> # Initialize output matrix
> myx <- matrix(nrow = 0, ncol = 11)
> 
> # Establish seed for replication
> rng <- RNGseq(totlen, 87658653)
> 
> # Run simulation loop
> misspatt <- foreach(pm = 1:lm, .combine = rbind) %:%
+   foreach(n = 1:ls, .combine = rbind) %:%
+   foreach(f = 1:lf, .combine = rbind) %:%
+   foreach(ipc = 1:li, .combine = rbind) %:%
+   foreach(
+     iter = 1:reps,
+     .combine = rbind,
+     .packages = pkgs,
+     .inorder = FALSE,
+     .errorhandling = "remove"
+   ) %dopar% {
+     # Make this many sets of seeds
+     k <- (pm - 1) * ls * lf * li * reps +
+       (n - 1) * lf * li * reps +
+       (f - 1) * li * reps +
+       (ipc - 1) * reps + iter
+     
+     # Seed for _this_ iteration
+     rngtools::setRNG(rng[[k]])
+     
+     # Create data matrix
+     mydata <-
+       simdata(
+         n = samp[n],
+         f = nf[f],
+         ipc = nipc[ipc],
+         c = c,
+         r = r,
+         pmiss = pctmiss[pm]
+       )
+     
+     # Convert it to matrix form
+     mymats <- mkmats(mydata)
+     
+     # Run PCA on correlation and polychoric matrices with extraction criteria
+     myout <- rbind(dopcamat(n = mymats$n, mat = mymats$cmat),
+                    dopcamat(n = mymats$n, mat = mymats$rmat))
+     cond <-
+       rbind(
+         cbind(iter, n, f = nf[f], ipc = nipc[ipc], pctmiss[pm], 'pearson'),
+         cbind(
+           iter,
+           n,
+           f = nf[f],
+           ipc = nipc[ipc],
+           pctmiss[pm],
+           'tetrachoric'
+         )
+       )
+     colnames(cond)[5] <- 'pmiss'
+     colnames(cond)[6] <- 'corrtype'
+     cbind(cond, myout)
+   }
